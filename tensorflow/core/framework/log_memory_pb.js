/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var tensorflow_core_framework_tensor_description_pb = require('../../../tensorflow/core/framework/tensor_description_pb.js');
goog.exportSymbol('proto.tensorflow.MemoryLogRawAllocation', null, global);
goog.exportSymbol('proto.tensorflow.MemoryLogRawDeallocation', null, global);
goog.exportSymbol('proto.tensorflow.MemoryLogStep', null, global);
goog.exportSymbol('proto.tensorflow.MemoryLogTensorAllocation', null, global);
goog.exportSymbol('proto.tensorflow.MemoryLogTensorDeallocation', null, global);
goog.exportSymbol('proto.tensorflow.MemoryLogTensorOutput', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.MemoryLogStep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.MemoryLogStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.MemoryLogStep.displayName = 'proto.tensorflow.MemoryLogStep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.MemoryLogStep.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.MemoryLogStep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.MemoryLogStep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryLogStep.toObject = function(includeInstance, msg) {
  var f, obj = {
    stepId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    handle: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.MemoryLogStep}
 */
proto.tensorflow.MemoryLogStep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.MemoryLogStep;
  return proto.tensorflow.MemoryLogStep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.MemoryLogStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.MemoryLogStep}
 */
proto.tensorflow.MemoryLogStep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStepId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.MemoryLogStep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.MemoryLogStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.MemoryLogStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryLogStep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStepId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHandle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 step_id = 1;
 * @return {number}
 */
proto.tensorflow.MemoryLogStep.prototype.getStepId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryLogStep.prototype.setStepId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string handle = 2;
 * @return {string}
 */
proto.tensorflow.MemoryLogStep.prototype.getHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.MemoryLogStep.prototype.setHandle = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.MemoryLogTensorAllocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.MemoryLogTensorAllocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.MemoryLogTensorAllocation.displayName = 'proto.tensorflow.MemoryLogTensorAllocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.MemoryLogTensorAllocation.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.MemoryLogTensorAllocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.MemoryLogTensorAllocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryLogTensorAllocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    stepId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    kernelName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tensor: (f = msg.getTensor()) && tensorflow_core_framework_tensor_description_pb.TensorDescription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.MemoryLogTensorAllocation}
 */
proto.tensorflow.MemoryLogTensorAllocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.MemoryLogTensorAllocation;
  return proto.tensorflow.MemoryLogTensorAllocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.MemoryLogTensorAllocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.MemoryLogTensorAllocation}
 */
proto.tensorflow.MemoryLogTensorAllocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStepId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKernelName(value);
      break;
    case 3:
      var value = new tensorflow_core_framework_tensor_description_pb.TensorDescription;
      reader.readMessage(value,tensorflow_core_framework_tensor_description_pb.TensorDescription.deserializeBinaryFromReader);
      msg.setTensor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.MemoryLogTensorAllocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.MemoryLogTensorAllocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.MemoryLogTensorAllocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryLogTensorAllocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStepId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getKernelName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTensor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      tensorflow_core_framework_tensor_description_pb.TensorDescription.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 step_id = 1;
 * @return {number}
 */
proto.tensorflow.MemoryLogTensorAllocation.prototype.getStepId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryLogTensorAllocation.prototype.setStepId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string kernel_name = 2;
 * @return {string}
 */
proto.tensorflow.MemoryLogTensorAllocation.prototype.getKernelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.MemoryLogTensorAllocation.prototype.setKernelName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TensorDescription tensor = 3;
 * @return {?proto.tensorflow.TensorDescription}
 */
proto.tensorflow.MemoryLogTensorAllocation.prototype.getTensor = function() {
  return /** @type{?proto.tensorflow.TensorDescription} */ (
    jspb.Message.getWrapperField(this, tensorflow_core_framework_tensor_description_pb.TensorDescription, 3));
};


/** @param {?proto.tensorflow.TensorDescription|undefined} value */
proto.tensorflow.MemoryLogTensorAllocation.prototype.setTensor = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.tensorflow.MemoryLogTensorAllocation.prototype.clearTensor = function() {
  this.setTensor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.MemoryLogTensorAllocation.prototype.hasTensor = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.MemoryLogTensorDeallocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.MemoryLogTensorDeallocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.MemoryLogTensorDeallocation.displayName = 'proto.tensorflow.MemoryLogTensorDeallocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.MemoryLogTensorDeallocation.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.MemoryLogTensorDeallocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.MemoryLogTensorDeallocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryLogTensorDeallocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    allocationId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    allocatorName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.MemoryLogTensorDeallocation}
 */
proto.tensorflow.MemoryLogTensorDeallocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.MemoryLogTensorDeallocation;
  return proto.tensorflow.MemoryLogTensorDeallocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.MemoryLogTensorDeallocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.MemoryLogTensorDeallocation}
 */
proto.tensorflow.MemoryLogTensorDeallocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllocationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAllocatorName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.MemoryLogTensorDeallocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.MemoryLogTensorDeallocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.MemoryLogTensorDeallocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryLogTensorDeallocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllocationId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAllocatorName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 allocation_id = 1;
 * @return {number}
 */
proto.tensorflow.MemoryLogTensorDeallocation.prototype.getAllocationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryLogTensorDeallocation.prototype.setAllocationId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string allocator_name = 2;
 * @return {string}
 */
proto.tensorflow.MemoryLogTensorDeallocation.prototype.getAllocatorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.MemoryLogTensorDeallocation.prototype.setAllocatorName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.MemoryLogTensorOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.MemoryLogTensorOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.MemoryLogTensorOutput.displayName = 'proto.tensorflow.MemoryLogTensorOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.MemoryLogTensorOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.MemoryLogTensorOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.MemoryLogTensorOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryLogTensorOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    stepId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    kernelName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tensor: (f = msg.getTensor()) && tensorflow_core_framework_tensor_description_pb.TensorDescription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.MemoryLogTensorOutput}
 */
proto.tensorflow.MemoryLogTensorOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.MemoryLogTensorOutput;
  return proto.tensorflow.MemoryLogTensorOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.MemoryLogTensorOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.MemoryLogTensorOutput}
 */
proto.tensorflow.MemoryLogTensorOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStepId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKernelName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 4:
      var value = new tensorflow_core_framework_tensor_description_pb.TensorDescription;
      reader.readMessage(value,tensorflow_core_framework_tensor_description_pb.TensorDescription.deserializeBinaryFromReader);
      msg.setTensor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.MemoryLogTensorOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.MemoryLogTensorOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.MemoryLogTensorOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryLogTensorOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStepId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getKernelName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTensor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      tensorflow_core_framework_tensor_description_pb.TensorDescription.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 step_id = 1;
 * @return {number}
 */
proto.tensorflow.MemoryLogTensorOutput.prototype.getStepId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryLogTensorOutput.prototype.setStepId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string kernel_name = 2;
 * @return {string}
 */
proto.tensorflow.MemoryLogTensorOutput.prototype.getKernelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.MemoryLogTensorOutput.prototype.setKernelName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 index = 3;
 * @return {number}
 */
proto.tensorflow.MemoryLogTensorOutput.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryLogTensorOutput.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional TensorDescription tensor = 4;
 * @return {?proto.tensorflow.TensorDescription}
 */
proto.tensorflow.MemoryLogTensorOutput.prototype.getTensor = function() {
  return /** @type{?proto.tensorflow.TensorDescription} */ (
    jspb.Message.getWrapperField(this, tensorflow_core_framework_tensor_description_pb.TensorDescription, 4));
};


/** @param {?proto.tensorflow.TensorDescription|undefined} value */
proto.tensorflow.MemoryLogTensorOutput.prototype.setTensor = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.tensorflow.MemoryLogTensorOutput.prototype.clearTensor = function() {
  this.setTensor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.MemoryLogTensorOutput.prototype.hasTensor = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.MemoryLogRawAllocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.MemoryLogRawAllocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.MemoryLogRawAllocation.displayName = 'proto.tensorflow.MemoryLogRawAllocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.MemoryLogRawAllocation.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.MemoryLogRawAllocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.MemoryLogRawAllocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryLogRawAllocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    stepId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    operation: jspb.Message.getFieldWithDefault(msg, 2, ""),
    numBytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ptr: jspb.Message.getFieldWithDefault(msg, 4, 0),
    allocationId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    allocatorName: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.MemoryLogRawAllocation}
 */
proto.tensorflow.MemoryLogRawAllocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.MemoryLogRawAllocation;
  return proto.tensorflow.MemoryLogRawAllocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.MemoryLogRawAllocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.MemoryLogRawAllocation}
 */
proto.tensorflow.MemoryLogRawAllocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStepId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperation(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPtr(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllocationId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAllocatorName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.MemoryLogRawAllocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.MemoryLogRawAllocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.MemoryLogRawAllocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryLogRawAllocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStepId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getOperation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNumBytes();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPtr();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAllocationId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getAllocatorName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int64 step_id = 1;
 * @return {number}
 */
proto.tensorflow.MemoryLogRawAllocation.prototype.getStepId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryLogRawAllocation.prototype.setStepId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string operation = 2;
 * @return {string}
 */
proto.tensorflow.MemoryLogRawAllocation.prototype.getOperation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.MemoryLogRawAllocation.prototype.setOperation = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 num_bytes = 3;
 * @return {number}
 */
proto.tensorflow.MemoryLogRawAllocation.prototype.getNumBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryLogRawAllocation.prototype.setNumBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 ptr = 4;
 * @return {number}
 */
proto.tensorflow.MemoryLogRawAllocation.prototype.getPtr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryLogRawAllocation.prototype.setPtr = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 allocation_id = 5;
 * @return {number}
 */
proto.tensorflow.MemoryLogRawAllocation.prototype.getAllocationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryLogRawAllocation.prototype.setAllocationId = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string allocator_name = 6;
 * @return {string}
 */
proto.tensorflow.MemoryLogRawAllocation.prototype.getAllocatorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.tensorflow.MemoryLogRawAllocation.prototype.setAllocatorName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.MemoryLogRawDeallocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.MemoryLogRawDeallocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.MemoryLogRawDeallocation.displayName = 'proto.tensorflow.MemoryLogRawDeallocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.MemoryLogRawDeallocation.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.MemoryLogRawDeallocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.MemoryLogRawDeallocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryLogRawDeallocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    stepId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    operation: jspb.Message.getFieldWithDefault(msg, 2, ""),
    allocationId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    allocatorName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    deferred: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.MemoryLogRawDeallocation}
 */
proto.tensorflow.MemoryLogRawDeallocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.MemoryLogRawDeallocation;
  return proto.tensorflow.MemoryLogRawDeallocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.MemoryLogRawDeallocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.MemoryLogRawDeallocation}
 */
proto.tensorflow.MemoryLogRawDeallocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStepId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperation(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllocationId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAllocatorName(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeferred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.MemoryLogRawDeallocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.MemoryLogRawDeallocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.MemoryLogRawDeallocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryLogRawDeallocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStepId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getOperation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllocationId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAllocatorName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDeferred();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int64 step_id = 1;
 * @return {number}
 */
proto.tensorflow.MemoryLogRawDeallocation.prototype.getStepId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryLogRawDeallocation.prototype.setStepId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string operation = 2;
 * @return {string}
 */
proto.tensorflow.MemoryLogRawDeallocation.prototype.getOperation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.MemoryLogRawDeallocation.prototype.setOperation = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 allocation_id = 3;
 * @return {number}
 */
proto.tensorflow.MemoryLogRawDeallocation.prototype.getAllocationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryLogRawDeallocation.prototype.setAllocationId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string allocator_name = 4;
 * @return {string}
 */
proto.tensorflow.MemoryLogRawDeallocation.prototype.getAllocatorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.tensorflow.MemoryLogRawDeallocation.prototype.setAllocatorName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool deferred = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tensorflow.MemoryLogRawDeallocation.prototype.getDeferred = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.tensorflow.MemoryLogRawDeallocation.prototype.setDeferred = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


goog.object.extend(exports, proto.tensorflow);
