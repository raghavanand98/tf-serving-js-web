/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var tensorflow_core_framework_types_pb = require('../../../tensorflow/core/framework/types_pb.js');
goog.exportSymbol('proto.tensorflow.GraphTransferConstNodeInfo', null, global);
goog.exportSymbol('proto.tensorflow.GraphTransferGraphInputNodeInfo', null, global);
goog.exportSymbol('proto.tensorflow.GraphTransferGraphOutputNodeInfo', null, global);
goog.exportSymbol('proto.tensorflow.GraphTransferInfo', null, global);
goog.exportSymbol('proto.tensorflow.GraphTransferInfo.Destination', null, global);
goog.exportSymbol('proto.tensorflow.GraphTransferNodeInfo', null, global);
goog.exportSymbol('proto.tensorflow.GraphTransferNodeInput', null, global);
goog.exportSymbol('proto.tensorflow.GraphTransferNodeInputInfo', null, global);
goog.exportSymbol('proto.tensorflow.GraphTransferNodeOutputInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferNodeInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.GraphTransferNodeInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferNodeInput.displayName = 'proto.tensorflow.GraphTransferNodeInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferNodeInput.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferNodeInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferNodeInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferNodeInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    outputPort: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferNodeInput}
 */
proto.tensorflow.GraphTransferNodeInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferNodeInput;
  return proto.tensorflow.GraphTransferNodeInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferNodeInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferNodeInput}
 */
proto.tensorflow.GraphTransferNodeInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferNodeInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferNodeInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferNodeInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferNodeInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOutputPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 node_id = 1;
 * @return {number}
 */
proto.tensorflow.GraphTransferNodeInput.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferNodeInput.prototype.setNodeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 output_port = 2;
 * @return {number}
 */
proto.tensorflow.GraphTransferNodeInput.prototype.getOutputPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferNodeInput.prototype.setOutputPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.GraphTransferNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferNodeInfo.displayName = 'proto.tensorflow.GraphTransferNodeInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    typeName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    socOpId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    paddingId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    inputCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    outputCount: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferNodeInfo}
 */
proto.tensorflow.GraphTransferNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferNodeInfo;
  return proto.tensorflow.GraphTransferNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferNodeInfo}
 */
proto.tensorflow.GraphTransferNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSocOpId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaddingId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInputCount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTypeName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSocOpId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPaddingId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getInputCount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getOutputCount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tensorflow.GraphTransferNodeInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.GraphTransferNodeInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 node_id = 2;
 * @return {number}
 */
proto.tensorflow.GraphTransferNodeInfo.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferNodeInfo.prototype.setNodeId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string type_name = 3;
 * @return {string}
 */
proto.tensorflow.GraphTransferNodeInfo.prototype.getTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.tensorflow.GraphTransferNodeInfo.prototype.setTypeName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 soc_op_id = 4;
 * @return {number}
 */
proto.tensorflow.GraphTransferNodeInfo.prototype.getSocOpId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferNodeInfo.prototype.setSocOpId = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 padding_id = 5;
 * @return {number}
 */
proto.tensorflow.GraphTransferNodeInfo.prototype.getPaddingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferNodeInfo.prototype.setPaddingId = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 input_count = 6;
 * @return {number}
 */
proto.tensorflow.GraphTransferNodeInfo.prototype.getInputCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferNodeInfo.prototype.setInputCount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 output_count = 7;
 * @return {number}
 */
proto.tensorflow.GraphTransferNodeInfo.prototype.getOutputCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferNodeInfo.prototype.setOutputCount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferConstNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphTransferConstNodeInfo.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphTransferConstNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferConstNodeInfo.displayName = 'proto.tensorflow.GraphTransferConstNodeInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.GraphTransferConstNodeInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferConstNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferConstNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferConstNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    shapeList: jspb.Message.getRepeatedField(msg, 3),
    data: msg.getData_asB64(),
    dtype: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferConstNodeInfo}
 */
proto.tensorflow.GraphTransferConstNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferConstNodeInfo;
  return proto.tensorflow.GraphTransferConstNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferConstNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferConstNodeInfo}
 */
proto.tensorflow.GraphTransferConstNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setShapeList(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {!proto.tensorflow.DataType} */ (reader.readEnum());
      msg.setDtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferConstNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferConstNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferConstNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getDtype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 node_id = 2;
 * @return {number}
 */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.setNodeId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated int64 shape = 3;
 * @return {!Array.<number>}
 */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.getShapeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.setShapeList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.addShape = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.tensorflow.GraphTransferConstNodeInfo.prototype.clearShapeList = function() {
  this.setShapeList([]);
};


/**
 * optional bytes data = 4;
 * @return {string}
 */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional DataType dtype = 5;
 * @return {!proto.tensorflow.DataType}
 */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.getDtype = function() {
  return /** @type {!proto.tensorflow.DataType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.tensorflow.DataType} value */
proto.tensorflow.GraphTransferConstNodeInfo.prototype.setDtype = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferNodeInputInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphTransferNodeInputInfo.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphTransferNodeInputInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferNodeInputInfo.displayName = 'proto.tensorflow.GraphTransferNodeInputInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.GraphTransferNodeInputInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferNodeInputInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferNodeInputInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferNodeInputInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferNodeInputInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeInputList: jspb.Message.toObjectList(msg.getNodeInputList(),
    proto.tensorflow.GraphTransferNodeInput.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferNodeInputInfo}
 */
proto.tensorflow.GraphTransferNodeInputInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferNodeInputInfo;
  return proto.tensorflow.GraphTransferNodeInputInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferNodeInputInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferNodeInputInfo}
 */
proto.tensorflow.GraphTransferNodeInputInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 2:
      var value = new proto.tensorflow.GraphTransferNodeInput;
      reader.readMessage(value,proto.tensorflow.GraphTransferNodeInput.deserializeBinaryFromReader);
      msg.addNodeInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferNodeInputInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferNodeInputInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferNodeInputInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferNodeInputInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNodeInputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tensorflow.GraphTransferNodeInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 node_id = 1;
 * @return {number}
 */
proto.tensorflow.GraphTransferNodeInputInfo.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferNodeInputInfo.prototype.setNodeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated GraphTransferNodeInput node_input = 2;
 * @return {!Array.<!proto.tensorflow.GraphTransferNodeInput>}
 */
proto.tensorflow.GraphTransferNodeInputInfo.prototype.getNodeInputList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferNodeInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferNodeInput, 2));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferNodeInput>} value */
proto.tensorflow.GraphTransferNodeInputInfo.prototype.setNodeInputList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferNodeInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferNodeInput}
 */
proto.tensorflow.GraphTransferNodeInputInfo.prototype.addNodeInput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tensorflow.GraphTransferNodeInput, opt_index);
};


proto.tensorflow.GraphTransferNodeInputInfo.prototype.clearNodeInputList = function() {
  this.setNodeInputList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferNodeOutputInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphTransferNodeOutputInfo.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphTransferNodeOutputInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferNodeOutputInfo.displayName = 'proto.tensorflow.GraphTransferNodeOutputInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.GraphTransferNodeOutputInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferNodeOutputInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferNodeOutputInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferNodeOutputInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferNodeOutputInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxByteSizeList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferNodeOutputInfo}
 */
proto.tensorflow.GraphTransferNodeOutputInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferNodeOutputInfo;
  return proto.tensorflow.GraphTransferNodeOutputInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferNodeOutputInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferNodeOutputInfo}
 */
proto.tensorflow.GraphTransferNodeOutputInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setMaxByteSizeList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferNodeOutputInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferNodeOutputInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferNodeOutputInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferNodeOutputInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMaxByteSizeList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 node_id = 1;
 * @return {number}
 */
proto.tensorflow.GraphTransferNodeOutputInfo.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.GraphTransferNodeOutputInfo.prototype.setNodeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int32 max_byte_size = 2;
 * @return {!Array.<number>}
 */
proto.tensorflow.GraphTransferNodeOutputInfo.prototype.getMaxByteSizeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.tensorflow.GraphTransferNodeOutputInfo.prototype.setMaxByteSizeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.GraphTransferNodeOutputInfo.prototype.addMaxByteSize = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.tensorflow.GraphTransferNodeOutputInfo.prototype.clearMaxByteSizeList = function() {
  this.setMaxByteSizeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferGraphInputNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphTransferGraphInputNodeInfo.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphTransferGraphInputNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferGraphInputNodeInfo.displayName = 'proto.tensorflow.GraphTransferGraphInputNodeInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.GraphTransferGraphInputNodeInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferGraphInputNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferGraphInputNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferGraphInputNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferGraphInputNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shapeList: jspb.Message.getRepeatedField(msg, 2),
    dtype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferGraphInputNodeInfo}
 */
proto.tensorflow.GraphTransferGraphInputNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferGraphInputNodeInfo;
  return proto.tensorflow.GraphTransferGraphInputNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferGraphInputNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferGraphInputNodeInfo}
 */
proto.tensorflow.GraphTransferGraphInputNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setShapeList(value);
      break;
    case 3:
      var value = /** @type {!proto.tensorflow.DataType} */ (reader.readEnum());
      msg.setDtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferGraphInputNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferGraphInputNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferGraphInputNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferGraphInputNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getDtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tensorflow.GraphTransferGraphInputNodeInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.GraphTransferGraphInputNodeInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int64 shape = 2;
 * @return {!Array.<number>}
 */
proto.tensorflow.GraphTransferGraphInputNodeInfo.prototype.getShapeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.tensorflow.GraphTransferGraphInputNodeInfo.prototype.setShapeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.GraphTransferGraphInputNodeInfo.prototype.addShape = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.tensorflow.GraphTransferGraphInputNodeInfo.prototype.clearShapeList = function() {
  this.setShapeList([]);
};


/**
 * optional DataType dtype = 3;
 * @return {!proto.tensorflow.DataType}
 */
proto.tensorflow.GraphTransferGraphInputNodeInfo.prototype.getDtype = function() {
  return /** @type {!proto.tensorflow.DataType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.tensorflow.DataType} value */
proto.tensorflow.GraphTransferGraphInputNodeInfo.prototype.setDtype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferGraphOutputNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphTransferGraphOutputNodeInfo.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphTransferGraphOutputNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferGraphOutputNodeInfo.displayName = 'proto.tensorflow.GraphTransferGraphOutputNodeInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferGraphOutputNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferGraphOutputNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shapeList: jspb.Message.getRepeatedField(msg, 2),
    dtype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferGraphOutputNodeInfo}
 */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferGraphOutputNodeInfo;
  return proto.tensorflow.GraphTransferGraphOutputNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferGraphOutputNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferGraphOutputNodeInfo}
 */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setShapeList(value);
      break;
    case 3:
      var value = /** @type {!proto.tensorflow.DataType} */ (reader.readEnum());
      msg.setDtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferGraphOutputNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferGraphOutputNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getDtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int64 shape = 2;
 * @return {!Array.<number>}
 */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.prototype.getShapeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.prototype.setShapeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.prototype.addShape = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.tensorflow.GraphTransferGraphOutputNodeInfo.prototype.clearShapeList = function() {
  this.setShapeList([]);
};


/**
 * optional DataType dtype = 3;
 * @return {!proto.tensorflow.DataType}
 */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.prototype.getDtype = function() {
  return /** @type {!proto.tensorflow.DataType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.tensorflow.DataType} value */
proto.tensorflow.GraphTransferGraphOutputNodeInfo.prototype.setDtype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.GraphTransferInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.GraphTransferInfo.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.GraphTransferInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.GraphTransferInfo.displayName = 'proto.tensorflow.GraphTransferInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.GraphTransferInfo.repeatedFields_ = [1,2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.GraphTransferInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.GraphTransferInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.GraphTransferInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeInfoList: jspb.Message.toObjectList(msg.getNodeInfoList(),
    proto.tensorflow.GraphTransferNodeInfo.toObject, includeInstance),
    constNodeInfoList: jspb.Message.toObjectList(msg.getConstNodeInfoList(),
    proto.tensorflow.GraphTransferConstNodeInfo.toObject, includeInstance),
    nodeInputInfoList: jspb.Message.toObjectList(msg.getNodeInputInfoList(),
    proto.tensorflow.GraphTransferNodeInputInfo.toObject, includeInstance),
    nodeOutputInfoList: jspb.Message.toObjectList(msg.getNodeOutputInfoList(),
    proto.tensorflow.GraphTransferNodeOutputInfo.toObject, includeInstance),
    graphInputNodeInfoList: jspb.Message.toObjectList(msg.getGraphInputNodeInfoList(),
    proto.tensorflow.GraphTransferGraphInputNodeInfo.toObject, includeInstance),
    graphOutputNodeInfoList: jspb.Message.toObjectList(msg.getGraphOutputNodeInfoList(),
    proto.tensorflow.GraphTransferGraphOutputNodeInfo.toObject, includeInstance),
    destination: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.GraphTransferInfo}
 */
proto.tensorflow.GraphTransferInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.GraphTransferInfo;
  return proto.tensorflow.GraphTransferInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.GraphTransferInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.GraphTransferInfo}
 */
proto.tensorflow.GraphTransferInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tensorflow.GraphTransferNodeInfo;
      reader.readMessage(value,proto.tensorflow.GraphTransferNodeInfo.deserializeBinaryFromReader);
      msg.addNodeInfo(value);
      break;
    case 2:
      var value = new proto.tensorflow.GraphTransferConstNodeInfo;
      reader.readMessage(value,proto.tensorflow.GraphTransferConstNodeInfo.deserializeBinaryFromReader);
      msg.addConstNodeInfo(value);
      break;
    case 3:
      var value = new proto.tensorflow.GraphTransferNodeInputInfo;
      reader.readMessage(value,proto.tensorflow.GraphTransferNodeInputInfo.deserializeBinaryFromReader);
      msg.addNodeInputInfo(value);
      break;
    case 4:
      var value = new proto.tensorflow.GraphTransferNodeOutputInfo;
      reader.readMessage(value,proto.tensorflow.GraphTransferNodeOutputInfo.deserializeBinaryFromReader);
      msg.addNodeOutputInfo(value);
      break;
    case 5:
      var value = new proto.tensorflow.GraphTransferGraphInputNodeInfo;
      reader.readMessage(value,proto.tensorflow.GraphTransferGraphInputNodeInfo.deserializeBinaryFromReader);
      msg.addGraphInputNodeInfo(value);
      break;
    case 6:
      var value = new proto.tensorflow.GraphTransferGraphOutputNodeInfo;
      reader.readMessage(value,proto.tensorflow.GraphTransferGraphOutputNodeInfo.deserializeBinaryFromReader);
      msg.addGraphOutputNodeInfo(value);
      break;
    case 7:
      var value = /** @type {!proto.tensorflow.GraphTransferInfo.Destination} */ (reader.readEnum());
      msg.setDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.GraphTransferInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.GraphTransferInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.GraphTransferInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.GraphTransferInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tensorflow.GraphTransferNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getConstNodeInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tensorflow.GraphTransferConstNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getNodeInputInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tensorflow.GraphTransferNodeInputInfo.serializeBinaryToWriter
    );
  }
  f = message.getNodeOutputInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.tensorflow.GraphTransferNodeOutputInfo.serializeBinaryToWriter
    );
  }
  f = message.getGraphInputNodeInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.tensorflow.GraphTransferGraphInputNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getGraphOutputNodeInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.tensorflow.GraphTransferGraphOutputNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.tensorflow.GraphTransferInfo.Destination = {
  NOP: 0,
  HEXAGON: 1
};

/**
 * repeated GraphTransferNodeInfo node_info = 1;
 * @return {!Array.<!proto.tensorflow.GraphTransferNodeInfo>}
 */
proto.tensorflow.GraphTransferInfo.prototype.getNodeInfoList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferNodeInfo, 1));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferNodeInfo>} value */
proto.tensorflow.GraphTransferInfo.prototype.setNodeInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.prototype.addNodeInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.GraphTransferNodeInfo, opt_index);
};


proto.tensorflow.GraphTransferInfo.prototype.clearNodeInfoList = function() {
  this.setNodeInfoList([]);
};


/**
 * repeated GraphTransferConstNodeInfo const_node_info = 2;
 * @return {!Array.<!proto.tensorflow.GraphTransferConstNodeInfo>}
 */
proto.tensorflow.GraphTransferInfo.prototype.getConstNodeInfoList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferConstNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferConstNodeInfo, 2));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferConstNodeInfo>} value */
proto.tensorflow.GraphTransferInfo.prototype.setConstNodeInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferConstNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferConstNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.prototype.addConstNodeInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tensorflow.GraphTransferConstNodeInfo, opt_index);
};


proto.tensorflow.GraphTransferInfo.prototype.clearConstNodeInfoList = function() {
  this.setConstNodeInfoList([]);
};


/**
 * repeated GraphTransferNodeInputInfo node_input_info = 3;
 * @return {!Array.<!proto.tensorflow.GraphTransferNodeInputInfo>}
 */
proto.tensorflow.GraphTransferInfo.prototype.getNodeInputInfoList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferNodeInputInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferNodeInputInfo, 3));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferNodeInputInfo>} value */
proto.tensorflow.GraphTransferInfo.prototype.setNodeInputInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferNodeInputInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferNodeInputInfo}
 */
proto.tensorflow.GraphTransferInfo.prototype.addNodeInputInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tensorflow.GraphTransferNodeInputInfo, opt_index);
};


proto.tensorflow.GraphTransferInfo.prototype.clearNodeInputInfoList = function() {
  this.setNodeInputInfoList([]);
};


/**
 * repeated GraphTransferNodeOutputInfo node_output_info = 4;
 * @return {!Array.<!proto.tensorflow.GraphTransferNodeOutputInfo>}
 */
proto.tensorflow.GraphTransferInfo.prototype.getNodeOutputInfoList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferNodeOutputInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferNodeOutputInfo, 4));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferNodeOutputInfo>} value */
proto.tensorflow.GraphTransferInfo.prototype.setNodeOutputInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferNodeOutputInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferNodeOutputInfo}
 */
proto.tensorflow.GraphTransferInfo.prototype.addNodeOutputInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.tensorflow.GraphTransferNodeOutputInfo, opt_index);
};


proto.tensorflow.GraphTransferInfo.prototype.clearNodeOutputInfoList = function() {
  this.setNodeOutputInfoList([]);
};


/**
 * repeated GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
 * @return {!Array.<!proto.tensorflow.GraphTransferGraphInputNodeInfo>}
 */
proto.tensorflow.GraphTransferInfo.prototype.getGraphInputNodeInfoList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferGraphInputNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferGraphInputNodeInfo, 5));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferGraphInputNodeInfo>} value */
proto.tensorflow.GraphTransferInfo.prototype.setGraphInputNodeInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferGraphInputNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferGraphInputNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.prototype.addGraphInputNodeInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tensorflow.GraphTransferGraphInputNodeInfo, opt_index);
};


proto.tensorflow.GraphTransferInfo.prototype.clearGraphInputNodeInfoList = function() {
  this.setGraphInputNodeInfoList([]);
};


/**
 * repeated GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
 * @return {!Array.<!proto.tensorflow.GraphTransferGraphOutputNodeInfo>}
 */
proto.tensorflow.GraphTransferInfo.prototype.getGraphOutputNodeInfoList = function() {
  return /** @type{!Array.<!proto.tensorflow.GraphTransferGraphOutputNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.GraphTransferGraphOutputNodeInfo, 6));
};


/** @param {!Array.<!proto.tensorflow.GraphTransferGraphOutputNodeInfo>} value */
proto.tensorflow.GraphTransferInfo.prototype.setGraphOutputNodeInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.tensorflow.GraphTransferGraphOutputNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.GraphTransferGraphOutputNodeInfo}
 */
proto.tensorflow.GraphTransferInfo.prototype.addGraphOutputNodeInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tensorflow.GraphTransferGraphOutputNodeInfo, opt_index);
};


proto.tensorflow.GraphTransferInfo.prototype.clearGraphOutputNodeInfoList = function() {
  this.setGraphOutputNodeInfoList([]);
};


/**
 * optional Destination destination = 7;
 * @return {!proto.tensorflow.GraphTransferInfo.Destination}
 */
proto.tensorflow.GraphTransferInfo.prototype.getDestination = function() {
  return /** @type {!proto.tensorflow.GraphTransferInfo.Destination} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.tensorflow.GraphTransferInfo.Destination} value */
proto.tensorflow.GraphTransferInfo.prototype.setDestination = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


goog.object.extend(exports, proto.tensorflow);
