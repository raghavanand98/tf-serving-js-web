/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var tensorflow_core_framework_allocation_description_pb = require('../../../tensorflow/core/framework/allocation_description_pb.js');
var tensorflow_core_framework_tensor_description_pb = require('../../../tensorflow/core/framework/tensor_description_pb.js');
goog.exportSymbol('proto.tensorflow.AllocationRecord', null, global);
goog.exportSymbol('proto.tensorflow.AllocatorMemoryUsed', null, global);
goog.exportSymbol('proto.tensorflow.DeviceStepStats', null, global);
goog.exportSymbol('proto.tensorflow.MemoryStats', null, global);
goog.exportSymbol('proto.tensorflow.NodeExecStats', null, global);
goog.exportSymbol('proto.tensorflow.NodeOutput', null, global);
goog.exportSymbol('proto.tensorflow.StepStats', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.AllocationRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.AllocationRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.AllocationRecord.displayName = 'proto.tensorflow.AllocationRecord';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.AllocationRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.AllocationRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.AllocationRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.AllocationRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    allocMicros: jspb.Message.getFieldWithDefault(msg, 1, 0),
    allocBytes: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.AllocationRecord}
 */
proto.tensorflow.AllocationRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.AllocationRecord;
  return proto.tensorflow.AllocationRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.AllocationRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.AllocationRecord}
 */
proto.tensorflow.AllocationRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllocMicros(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllocBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.AllocationRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.AllocationRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.AllocationRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.AllocationRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllocMicros();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAllocBytes();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 alloc_micros = 1;
 * @return {number}
 */
proto.tensorflow.AllocationRecord.prototype.getAllocMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.AllocationRecord.prototype.setAllocMicros = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 alloc_bytes = 2;
 * @return {number}
 */
proto.tensorflow.AllocationRecord.prototype.getAllocBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.AllocationRecord.prototype.setAllocBytes = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.AllocatorMemoryUsed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.AllocatorMemoryUsed.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.AllocatorMemoryUsed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.AllocatorMemoryUsed.displayName = 'proto.tensorflow.AllocatorMemoryUsed';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.AllocatorMemoryUsed.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.AllocatorMemoryUsed.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.AllocatorMemoryUsed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.AllocatorMemoryUsed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.AllocatorMemoryUsed.toObject = function(includeInstance, msg) {
  var f, obj = {
    allocatorName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    totalBytes: jspb.Message.getFieldWithDefault(msg, 2, 0),
    peakBytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    liveBytes: jspb.Message.getFieldWithDefault(msg, 4, 0),
    allocationRecordsList: jspb.Message.toObjectList(msg.getAllocationRecordsList(),
    proto.tensorflow.AllocationRecord.toObject, includeInstance),
    allocatorBytesInUse: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.AllocatorMemoryUsed}
 */
proto.tensorflow.AllocatorMemoryUsed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.AllocatorMemoryUsed;
  return proto.tensorflow.AllocatorMemoryUsed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.AllocatorMemoryUsed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.AllocatorMemoryUsed}
 */
proto.tensorflow.AllocatorMemoryUsed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAllocatorName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalBytes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPeakBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLiveBytes(value);
      break;
    case 6:
      var value = new proto.tensorflow.AllocationRecord;
      reader.readMessage(value,proto.tensorflow.AllocationRecord.deserializeBinaryFromReader);
      msg.addAllocationRecords(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllocatorBytesInUse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.AllocatorMemoryUsed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.AllocatorMemoryUsed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.AllocatorMemoryUsed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.AllocatorMemoryUsed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllocatorName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTotalBytes();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPeakBytes();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getLiveBytes();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getAllocationRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.tensorflow.AllocationRecord.serializeBinaryToWriter
    );
  }
  f = message.getAllocatorBytesInUse();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string allocator_name = 1;
 * @return {string}
 */
proto.tensorflow.AllocatorMemoryUsed.prototype.getAllocatorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.AllocatorMemoryUsed.prototype.setAllocatorName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 total_bytes = 2;
 * @return {number}
 */
proto.tensorflow.AllocatorMemoryUsed.prototype.getTotalBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.AllocatorMemoryUsed.prototype.setTotalBytes = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 peak_bytes = 3;
 * @return {number}
 */
proto.tensorflow.AllocatorMemoryUsed.prototype.getPeakBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.AllocatorMemoryUsed.prototype.setPeakBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 live_bytes = 4;
 * @return {number}
 */
proto.tensorflow.AllocatorMemoryUsed.prototype.getLiveBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.AllocatorMemoryUsed.prototype.setLiveBytes = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated AllocationRecord allocation_records = 6;
 * @return {!Array.<!proto.tensorflow.AllocationRecord>}
 */
proto.tensorflow.AllocatorMemoryUsed.prototype.getAllocationRecordsList = function() {
  return /** @type{!Array.<!proto.tensorflow.AllocationRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.AllocationRecord, 6));
};


/** @param {!Array.<!proto.tensorflow.AllocationRecord>} value */
proto.tensorflow.AllocatorMemoryUsed.prototype.setAllocationRecordsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.tensorflow.AllocationRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.AllocationRecord}
 */
proto.tensorflow.AllocatorMemoryUsed.prototype.addAllocationRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tensorflow.AllocationRecord, opt_index);
};


proto.tensorflow.AllocatorMemoryUsed.prototype.clearAllocationRecordsList = function() {
  this.setAllocationRecordsList([]);
};


/**
 * optional int64 allocator_bytes_in_use = 5;
 * @return {number}
 */
proto.tensorflow.AllocatorMemoryUsed.prototype.getAllocatorBytesInUse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tensorflow.AllocatorMemoryUsed.prototype.setAllocatorBytesInUse = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.NodeOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.NodeOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.NodeOutput.displayName = 'proto.tensorflow.NodeOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.NodeOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.NodeOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.NodeOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.NodeOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tensorDescription: (f = msg.getTensorDescription()) && tensorflow_core_framework_tensor_description_pb.TensorDescription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.NodeOutput}
 */
proto.tensorflow.NodeOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.NodeOutput;
  return proto.tensorflow.NodeOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.NodeOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.NodeOutput}
 */
proto.tensorflow.NodeOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSlot(value);
      break;
    case 3:
      var value = new tensorflow_core_framework_tensor_description_pb.TensorDescription;
      reader.readMessage(value,tensorflow_core_framework_tensor_description_pb.TensorDescription.deserializeBinaryFromReader);
      msg.setTensorDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.NodeOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.NodeOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.NodeOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.NodeOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTensorDescription();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      tensorflow_core_framework_tensor_description_pb.TensorDescription.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 slot = 1;
 * @return {number}
 */
proto.tensorflow.NodeOutput.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.NodeOutput.prototype.setSlot = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TensorDescription tensor_description = 3;
 * @return {?proto.tensorflow.TensorDescription}
 */
proto.tensorflow.NodeOutput.prototype.getTensorDescription = function() {
  return /** @type{?proto.tensorflow.TensorDescription} */ (
    jspb.Message.getWrapperField(this, tensorflow_core_framework_tensor_description_pb.TensorDescription, 3));
};


/** @param {?proto.tensorflow.TensorDescription|undefined} value */
proto.tensorflow.NodeOutput.prototype.setTensorDescription = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.tensorflow.NodeOutput.prototype.clearTensorDescription = function() {
  this.setTensorDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.NodeOutput.prototype.hasTensorDescription = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.MemoryStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.MemoryStats.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.MemoryStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.MemoryStats.displayName = 'proto.tensorflow.MemoryStats';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.MemoryStats.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.MemoryStats.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.MemoryStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.MemoryStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    tempMemorySize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    persistentMemorySize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    persistentTensorAllocIdsList: jspb.Message.getRepeatedField(msg, 5),
    deviceTempMemorySize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    devicePersistentMemorySize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    devicePersistentTensorAllocIdsList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.MemoryStats}
 */
proto.tensorflow.MemoryStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.MemoryStats;
  return proto.tensorflow.MemoryStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.MemoryStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.MemoryStats}
 */
proto.tensorflow.MemoryStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTempMemorySize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPersistentMemorySize(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setPersistentTensorAllocIdsList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDeviceTempMemorySize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDevicePersistentMemorySize(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setDevicePersistentTensorAllocIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.MemoryStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.MemoryStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.MemoryStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTempMemorySize();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPersistentMemorySize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPersistentTensorAllocIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      5,
      f
    );
  }
  f = message.getDeviceTempMemorySize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDevicePersistentMemorySize();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getDevicePersistentTensorAllocIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      6,
      f
    );
  }
};


/**
 * optional int64 temp_memory_size = 1;
 * @return {number}
 */
proto.tensorflow.MemoryStats.prototype.getTempMemorySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryStats.prototype.setTempMemorySize = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 persistent_memory_size = 3;
 * @return {number}
 */
proto.tensorflow.MemoryStats.prototype.getPersistentMemorySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryStats.prototype.setPersistentMemorySize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated int64 persistent_tensor_alloc_ids = 5;
 * @return {!Array.<number>}
 */
proto.tensorflow.MemoryStats.prototype.getPersistentTensorAllocIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.tensorflow.MemoryStats.prototype.setPersistentTensorAllocIdsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.MemoryStats.prototype.addPersistentTensorAllocIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.tensorflow.MemoryStats.prototype.clearPersistentTensorAllocIdsList = function() {
  this.setPersistentTensorAllocIdsList([]);
};


/**
 * optional int64 device_temp_memory_size = 2;
 * @return {number}
 */
proto.tensorflow.MemoryStats.prototype.getDeviceTempMemorySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryStats.prototype.setDeviceTempMemorySize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 device_persistent_memory_size = 4;
 * @return {number}
 */
proto.tensorflow.MemoryStats.prototype.getDevicePersistentMemorySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.MemoryStats.prototype.setDevicePersistentMemorySize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated int64 device_persistent_tensor_alloc_ids = 6;
 * @return {!Array.<number>}
 */
proto.tensorflow.MemoryStats.prototype.getDevicePersistentTensorAllocIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<number>} value */
proto.tensorflow.MemoryStats.prototype.setDevicePersistentTensorAllocIdsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tensorflow.MemoryStats.prototype.addDevicePersistentTensorAllocIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.tensorflow.MemoryStats.prototype.clearDevicePersistentTensorAllocIdsList = function() {
  this.setDevicePersistentTensorAllocIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.NodeExecStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.NodeExecStats.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.NodeExecStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.NodeExecStats.displayName = 'proto.tensorflow.NodeExecStats';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.NodeExecStats.repeatedFields_ = [6,7,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.NodeExecStats.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.NodeExecStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.NodeExecStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.NodeExecStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    allStartMicros: jspb.Message.getFieldWithDefault(msg, 2, 0),
    opStartRelMicros: jspb.Message.getFieldWithDefault(msg, 3, 0),
    opEndRelMicros: jspb.Message.getFieldWithDefault(msg, 4, 0),
    allEndRelMicros: jspb.Message.getFieldWithDefault(msg, 5, 0),
    memoryList: jspb.Message.toObjectList(msg.getMemoryList(),
    proto.tensorflow.AllocatorMemoryUsed.toObject, includeInstance),
    outputList: jspb.Message.toObjectList(msg.getOutputList(),
    proto.tensorflow.NodeOutput.toObject, includeInstance),
    timelineLabel: jspb.Message.getFieldWithDefault(msg, 8, ""),
    scheduledMicros: jspb.Message.getFieldWithDefault(msg, 9, 0),
    threadId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    referencedTensorList: jspb.Message.toObjectList(msg.getReferencedTensorList(),
    tensorflow_core_framework_allocation_description_pb.AllocationDescription.toObject, includeInstance),
    memoryStats: (f = msg.getMemoryStats()) && proto.tensorflow.MemoryStats.toObject(includeInstance, f),
    allStartNanos: jspb.Message.getFieldWithDefault(msg, 13, 0),
    opStartRelNanos: jspb.Message.getFieldWithDefault(msg, 14, 0),
    opEndRelNanos: jspb.Message.getFieldWithDefault(msg, 15, 0),
    allEndRelNanos: jspb.Message.getFieldWithDefault(msg, 16, 0),
    scheduledNanos: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.NodeExecStats}
 */
proto.tensorflow.NodeExecStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.NodeExecStats;
  return proto.tensorflow.NodeExecStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.NodeExecStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.NodeExecStats}
 */
proto.tensorflow.NodeExecStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllStartMicros(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpStartRelMicros(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpEndRelMicros(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllEndRelMicros(value);
      break;
    case 6:
      var value = new proto.tensorflow.AllocatorMemoryUsed;
      reader.readMessage(value,proto.tensorflow.AllocatorMemoryUsed.deserializeBinaryFromReader);
      msg.addMemory(value);
      break;
    case 7:
      var value = new proto.tensorflow.NodeOutput;
      reader.readMessage(value,proto.tensorflow.NodeOutput.deserializeBinaryFromReader);
      msg.addOutput(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineLabel(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScheduledMicros(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThreadId(value);
      break;
    case 11:
      var value = new tensorflow_core_framework_allocation_description_pb.AllocationDescription;
      reader.readMessage(value,tensorflow_core_framework_allocation_description_pb.AllocationDescription.deserializeBinaryFromReader);
      msg.addReferencedTensor(value);
      break;
    case 12:
      var value = new proto.tensorflow.MemoryStats;
      reader.readMessage(value,proto.tensorflow.MemoryStats.deserializeBinaryFromReader);
      msg.setMemoryStats(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllStartNanos(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpStartRelNanos(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpEndRelNanos(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllEndRelNanos(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScheduledNanos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.NodeExecStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.NodeExecStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.NodeExecStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.NodeExecStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllStartMicros();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getOpStartRelMicros();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOpEndRelMicros();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getAllEndRelMicros();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMemoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.tensorflow.AllocatorMemoryUsed.serializeBinaryToWriter
    );
  }
  f = message.getOutputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.tensorflow.NodeOutput.serializeBinaryToWriter
    );
  }
  f = message.getTimelineLabel();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getScheduledMicros();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getThreadId();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getReferencedTensorList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      tensorflow_core_framework_allocation_description_pb.AllocationDescription.serializeBinaryToWriter
    );
  }
  f = message.getMemoryStats();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.tensorflow.MemoryStats.serializeBinaryToWriter
    );
  }
  f = message.getAllStartNanos();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getOpStartRelNanos();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getOpEndRelNanos();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getAllEndRelNanos();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getScheduledNanos();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
};


/**
 * optional string node_name = 1;
 * @return {string}
 */
proto.tensorflow.NodeExecStats.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.NodeExecStats.prototype.setNodeName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 all_start_micros = 2;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getAllStartMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setAllStartMicros = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 op_start_rel_micros = 3;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getOpStartRelMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setOpStartRelMicros = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 op_end_rel_micros = 4;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getOpEndRelMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setOpEndRelMicros = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 all_end_rel_micros = 5;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getAllEndRelMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setAllEndRelMicros = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated AllocatorMemoryUsed memory = 6;
 * @return {!Array.<!proto.tensorflow.AllocatorMemoryUsed>}
 */
proto.tensorflow.NodeExecStats.prototype.getMemoryList = function() {
  return /** @type{!Array.<!proto.tensorflow.AllocatorMemoryUsed>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.AllocatorMemoryUsed, 6));
};


/** @param {!Array.<!proto.tensorflow.AllocatorMemoryUsed>} value */
proto.tensorflow.NodeExecStats.prototype.setMemoryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.tensorflow.AllocatorMemoryUsed=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.AllocatorMemoryUsed}
 */
proto.tensorflow.NodeExecStats.prototype.addMemory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tensorflow.AllocatorMemoryUsed, opt_index);
};


proto.tensorflow.NodeExecStats.prototype.clearMemoryList = function() {
  this.setMemoryList([]);
};


/**
 * repeated NodeOutput output = 7;
 * @return {!Array.<!proto.tensorflow.NodeOutput>}
 */
proto.tensorflow.NodeExecStats.prototype.getOutputList = function() {
  return /** @type{!Array.<!proto.tensorflow.NodeOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.NodeOutput, 7));
};


/** @param {!Array.<!proto.tensorflow.NodeOutput>} value */
proto.tensorflow.NodeExecStats.prototype.setOutputList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.tensorflow.NodeOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.NodeOutput}
 */
proto.tensorflow.NodeExecStats.prototype.addOutput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.tensorflow.NodeOutput, opt_index);
};


proto.tensorflow.NodeExecStats.prototype.clearOutputList = function() {
  this.setOutputList([]);
};


/**
 * optional string timeline_label = 8;
 * @return {string}
 */
proto.tensorflow.NodeExecStats.prototype.getTimelineLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.tensorflow.NodeExecStats.prototype.setTimelineLabel = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 scheduled_micros = 9;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getScheduledMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setScheduledMicros = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 thread_id = 10;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getThreadId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setThreadId = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * repeated AllocationDescription referenced_tensor = 11;
 * @return {!Array.<!proto.tensorflow.AllocationDescription>}
 */
proto.tensorflow.NodeExecStats.prototype.getReferencedTensorList = function() {
  return /** @type{!Array.<!proto.tensorflow.AllocationDescription>} */ (
    jspb.Message.getRepeatedWrapperField(this, tensorflow_core_framework_allocation_description_pb.AllocationDescription, 11));
};


/** @param {!Array.<!proto.tensorflow.AllocationDescription>} value */
proto.tensorflow.NodeExecStats.prototype.setReferencedTensorList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.tensorflow.AllocationDescription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.AllocationDescription}
 */
proto.tensorflow.NodeExecStats.prototype.addReferencedTensor = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.tensorflow.AllocationDescription, opt_index);
};


proto.tensorflow.NodeExecStats.prototype.clearReferencedTensorList = function() {
  this.setReferencedTensorList([]);
};


/**
 * optional MemoryStats memory_stats = 12;
 * @return {?proto.tensorflow.MemoryStats}
 */
proto.tensorflow.NodeExecStats.prototype.getMemoryStats = function() {
  return /** @type{?proto.tensorflow.MemoryStats} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.MemoryStats, 12));
};


/** @param {?proto.tensorflow.MemoryStats|undefined} value */
proto.tensorflow.NodeExecStats.prototype.setMemoryStats = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.tensorflow.NodeExecStats.prototype.clearMemoryStats = function() {
  this.setMemoryStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.NodeExecStats.prototype.hasMemoryStats = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int64 all_start_nanos = 13;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getAllStartNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setAllStartNanos = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 op_start_rel_nanos = 14;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getOpStartRelNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setOpStartRelNanos = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int64 op_end_rel_nanos = 15;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getOpEndRelNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setOpEndRelNanos = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int64 all_end_rel_nanos = 16;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getAllEndRelNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setAllEndRelNanos = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int64 scheduled_nanos = 17;
 * @return {number}
 */
proto.tensorflow.NodeExecStats.prototype.getScheduledNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.tensorflow.NodeExecStats.prototype.setScheduledNanos = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.DeviceStepStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.DeviceStepStats.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.DeviceStepStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.DeviceStepStats.displayName = 'proto.tensorflow.DeviceStepStats';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.DeviceStepStats.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.DeviceStepStats.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.DeviceStepStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.DeviceStepStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.DeviceStepStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodeStatsList: jspb.Message.toObjectList(msg.getNodeStatsList(),
    proto.tensorflow.NodeExecStats.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.DeviceStepStats}
 */
proto.tensorflow.DeviceStepStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.DeviceStepStats;
  return proto.tensorflow.DeviceStepStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.DeviceStepStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.DeviceStepStats}
 */
proto.tensorflow.DeviceStepStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 2:
      var value = new proto.tensorflow.NodeExecStats;
      reader.readMessage(value,proto.tensorflow.NodeExecStats.deserializeBinaryFromReader);
      msg.addNodeStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.DeviceStepStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.DeviceStepStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.DeviceStepStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.DeviceStepStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeStatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tensorflow.NodeExecStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.tensorflow.DeviceStepStats.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.DeviceStepStats.prototype.setDevice = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated NodeExecStats node_stats = 2;
 * @return {!Array.<!proto.tensorflow.NodeExecStats>}
 */
proto.tensorflow.DeviceStepStats.prototype.getNodeStatsList = function() {
  return /** @type{!Array.<!proto.tensorflow.NodeExecStats>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.NodeExecStats, 2));
};


/** @param {!Array.<!proto.tensorflow.NodeExecStats>} value */
proto.tensorflow.DeviceStepStats.prototype.setNodeStatsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tensorflow.NodeExecStats=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.NodeExecStats}
 */
proto.tensorflow.DeviceStepStats.prototype.addNodeStats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tensorflow.NodeExecStats, opt_index);
};


proto.tensorflow.DeviceStepStats.prototype.clearNodeStatsList = function() {
  this.setNodeStatsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.StepStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.StepStats.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.StepStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.StepStats.displayName = 'proto.tensorflow.StepStats';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.StepStats.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.StepStats.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.StepStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.StepStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.StepStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    devStatsList: jspb.Message.toObjectList(msg.getDevStatsList(),
    proto.tensorflow.DeviceStepStats.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.StepStats}
 */
proto.tensorflow.StepStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.StepStats;
  return proto.tensorflow.StepStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.StepStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.StepStats}
 */
proto.tensorflow.StepStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tensorflow.DeviceStepStats;
      reader.readMessage(value,proto.tensorflow.DeviceStepStats.deserializeBinaryFromReader);
      msg.addDevStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.StepStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.StepStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.StepStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.StepStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevStatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tensorflow.DeviceStepStats.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DeviceStepStats dev_stats = 1;
 * @return {!Array.<!proto.tensorflow.DeviceStepStats>}
 */
proto.tensorflow.StepStats.prototype.getDevStatsList = function() {
  return /** @type{!Array.<!proto.tensorflow.DeviceStepStats>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.DeviceStepStats, 1));
};


/** @param {!Array.<!proto.tensorflow.DeviceStepStats>} value */
proto.tensorflow.StepStats.prototype.setDevStatsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tensorflow.DeviceStepStats=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.DeviceStepStats}
 */
proto.tensorflow.StepStats.prototype.addDevStats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.DeviceStepStats, opt_index);
};


proto.tensorflow.StepStats.prototype.clearDevStatsList = function() {
  this.setDevStatsList([]);
};


goog.object.extend(exports, proto.tensorflow);
