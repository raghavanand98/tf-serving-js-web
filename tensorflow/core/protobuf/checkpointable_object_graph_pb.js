/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.tensorflow.CheckpointableObjectGraph', null, global);
goog.exportSymbol('proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject', null, global);
goog.exportSymbol('proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference', null, global);
goog.exportSymbol('proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor', null, global);
goog.exportSymbol('proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.CheckpointableObjectGraph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.CheckpointableObjectGraph.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.CheckpointableObjectGraph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.CheckpointableObjectGraph.displayName = 'proto.tensorflow.CheckpointableObjectGraph';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.CheckpointableObjectGraph.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.CheckpointableObjectGraph.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.CheckpointableObjectGraph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.CheckpointableObjectGraph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.CheckpointableObjectGraph.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.CheckpointableObjectGraph}
 */
proto.tensorflow.CheckpointableObjectGraph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.CheckpointableObjectGraph;
  return proto.tensorflow.CheckpointableObjectGraph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.CheckpointableObjectGraph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.CheckpointableObjectGraph}
 */
proto.tensorflow.CheckpointableObjectGraph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject;
      reader.readMessage(value,proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.CheckpointableObjectGraph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.CheckpointableObjectGraph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.CheckpointableObjectGraph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.CheckpointableObjectGraph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.displayName = 'proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.toObject, includeInstance),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.toObject, includeInstance),
    slotVariablesList: jspb.Message.toObjectList(msg.getSlotVariablesList(),
    proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject;
  return proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference;
      reader.readMessage(value,proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    case 2:
      var value = new proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor;
      reader.readMessage(value,proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 3:
      var value = new proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference;
      reader.readMessage(value,proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.deserializeBinaryFromReader);
      msg.addSlotVariables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.serializeBinaryToWriter
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.serializeBinaryToWriter
    );
  }
  f = message.getSlotVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.displayName = 'proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    localName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference;
  return proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLocalName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 node_id = 1;
 * @return {number}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.prototype.setNodeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string local_name = 2;
 * @return {string}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.prototype.getLocalName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.prototype.setLocalName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.displayName = 'proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fullName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    checkpointKey: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor;
  return proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckpointKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFullName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCheckpointKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string full_name = 2;
 * @return {string}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.prototype.setFullName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string checkpoint_key = 3;
 * @return {string}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.prototype.getCheckpointKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.prototype.setCheckpointKey = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.displayName = 'proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    originalVariableNodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slotName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    slotVariableNodeId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference;
  return proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOriginalVariableNodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlotName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSlotVariableNodeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOriginalVariableNodeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSlotName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSlotVariableNodeId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 original_variable_node_id = 1;
 * @return {number}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.prototype.getOriginalVariableNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.prototype.setOriginalVariableNodeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string slot_name = 2;
 * @return {string}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.prototype.getSlotName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.prototype.setSlotName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 slot_variable_node_id = 3;
 * @return {number}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.prototype.getSlotVariableNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.prototype.setSlotVariableNodeId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated ObjectReference children = 1;
 * @return {!Array.<!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference>}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.getChildrenList = function() {
  return /** @type{!Array.<!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference, 1));
};


/** @param {!Array.<!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference>} value */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference, opt_index);
};


proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};


/**
 * repeated SerializedTensor attributes = 2;
 * @return {!Array.<!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor>}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.getAttributesList = function() {
  return /** @type{!Array.<!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor, 2));
};


/** @param {!Array.<!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor>} value */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.setAttributesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor, opt_index);
};


proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.clearAttributesList = function() {
  this.setAttributesList([]);
};


/**
 * repeated SlotVariableReference slot_variables = 3;
 * @return {!Array.<!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference>}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.getSlotVariablesList = function() {
  return /** @type{!Array.<!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference, 3));
};


/** @param {!Array.<!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference>} value */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.setSlotVariablesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference}
 */
proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.addSlotVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference, opt_index);
};


proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject.prototype.clearSlotVariablesList = function() {
  this.setSlotVariablesList([]);
};


/**
 * repeated CheckpointableObject nodes = 1;
 * @return {!Array.<!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject>}
 */
proto.tensorflow.CheckpointableObjectGraph.prototype.getNodesList = function() {
  return /** @type{!Array.<!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject, 1));
};


/** @param {!Array.<!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject>} value */
proto.tensorflow.CheckpointableObjectGraph.prototype.setNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject}
 */
proto.tensorflow.CheckpointableObjectGraph.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.CheckpointableObjectGraph.CheckpointableObject, opt_index);
};


proto.tensorflow.CheckpointableObjectGraph.prototype.clearNodesList = function() {
  this.setNodesList([]);
};


goog.object.extend(exports, proto.tensorflow);
